-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\EncoderRead\encoderread_dut_encoderread_pcore_dut.vhd
-- Created: 2015-02-11 17:57:03
-- 
-- Generated by MATLAB 8.4 and HDL Coder 3.5
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: encoderread_dut_encoderread_pcore_dut
-- Source Path: encoderread_dut_encoderread_pcore/encoderread_dut_encoderread_pcore_dut
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY encoderread_dut_encoderread_pcore_dut IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        dut_enable                        :   IN    std_logic;  -- ufix1
        A                                 :   IN    std_logic;  -- ufix1
        B                                 :   IN    std_logic;  -- ufix1
        reset_1                           :   IN    std_logic;  -- ufix1
        enable                            :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;  -- ufix1
        count                             :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
        led_A                             :   OUT   std_logic;  -- ufix1
        led_B                             :   OUT   std_logic  -- ufix1
        );
END encoderread_dut_encoderread_pcore_dut;


ARCHITECTURE rtl OF encoderread_dut_encoderread_pcore_dut IS

  -- Component Declarations
  COMPONENT dut_EncoderRead
    PORT( clk                             :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          reset                           :   IN    std_logic;
          A                               :   IN    std_logic;  -- ufix1
          B                               :   IN    std_logic;  -- ufix1
          reset_1                         :   IN    std_logic;  -- ufix1
          enable                          :   IN    std_logic;  -- ufix1
          ce_out                          :   OUT   std_logic;  -- ufix1
          count                           :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32
          led_A                           :   OUT   std_logic;  -- ufix1
          led_B                           :   OUT   std_logic  -- ufix1
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dut_EncoderRead
    USE ENTITY work.dut_EncoderRead(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL A_sig                            : std_logic;  -- ufix1
  SIGNAL B_sig                            : std_logic;  -- ufix1
  SIGNAL reset_1_sig                      : std_logic;  -- ufix1
  SIGNAL enable_sig                       : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL count_sig                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL led_A_sig                        : std_logic;  -- ufix1
  SIGNAL led_B_sig                        : std_logic;  -- ufix1

BEGIN
  u_dut_EncoderRead : dut_EncoderRead
    PORT MAP( clk => clk,
              clk_enable => enb,
              reset => reset,
              A => A_sig,  -- ufix1
              B => B_sig,  -- ufix1
              reset_1 => reset_1_sig,  -- ufix1
              enable => enable_sig,  -- ufix1
              ce_out => ce_out_sig,  -- ufix1
              count => count_sig,  -- sfix32
              led_A => led_A_sig,  -- ufix1
              led_B => led_B_sig  -- ufix1
              );

  A_sig <= A;

  B_sig <= B;

  reset_1_sig <= reset_1;

  enable_sig <= enable;

  enb <= dut_enable;

  ce_out <= ce_out_sig;

  count <= count_sig;

  led_A <= led_A_sig;

  led_B <= led_B_sig;

END rtl;

