-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\EncoderRead\encoderread_dut_encoderread_pcore_addr_decoder.vhd
-- Created: 2015-02-11 17:57:03
-- 
-- Generated by MATLAB 8.4 and HDL Coder 3.5
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: encoderread_dut_encoderread_pcore_addr_decoder
-- Source Path: encoderread_dut_encoderread_pcore/encoderread_dut_encoderread_pcore_axi_lite/encoderread_dut_encoderread_pcore_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY encoderread_dut_encoderread_pcore_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_count                        :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_reset                       :   OUT   std_logic;  -- ufix1
        write_enable                      :   OUT   std_logic  -- ufix1
        );
END encoderread_dut_encoderread_pcore_addr_decoder;


ARCHITECTURE rtl OF encoderread_dut_encoderread_pcore_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_count                 : std_logic;  -- ufix1
  SIGNAL read_count_signed                : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL const_z                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_count                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL data_in_count                    : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_count                  : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_enable            : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable               : std_logic;  -- ufix1
  SIGNAL write_reg_axi_enable             : std_logic;  -- ufix1
  SIGNAL data_in_reset                    : std_logic;  -- ufix1
  SIGNAL decode_sel_reset                 : std_logic;  -- ufix1
  SIGNAL reg_enb_reset                    : std_logic;  -- ufix1
  SIGNAL write_reg_reset                  : std_logic;  -- ufix1
  SIGNAL data_in_enable                   : std_logic;  -- ufix1
  SIGNAL decode_sel_enable                : std_logic;  -- ufix1
  SIGNAL reg_enb_enable                   : std_logic;  -- ufix1
  SIGNAL write_reg_enable                 : std_logic;  -- ufix1

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_count <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001000010#, 14) ELSE
      '0';

  read_count_signed <= signed(read_count);

  const_1 <= '1';

  enb <= const_1;

  const_z <= (OTHERS => 'Z');


  reg_count_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_count <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_count <= read_count_signed;
      END IF;
    END IF;
  END PROCESS reg_count_process;

  data_in_count <= unsigned(read_reg_count);

  
  decode_rd_count <= const_z WHEN decode_sel_count = '0' ELSE
      data_in_count;

  data_read <= std_logic_vector(decode_rd_count);

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  
  decode_sel_axi_enable <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000000000001#, 14) ELSE
      '0';

  reg_enb_axi_enable <= decode_sel_axi_enable AND wr_enb;

  reg_axi_enable_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_axi_enable <= '1';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_axi_enable = '1' THEN
        write_reg_axi_enable <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_process;

  write_axi_enable <= write_reg_axi_enable;

  data_in_reset <= data_write_unsigned(0);

  
  decode_sel_reset <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001000000#, 14) ELSE
      '0';

  reg_enb_reset <= decode_sel_reset AND wr_enb;

  reg_reset_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_reset <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_reset = '1' THEN
        write_reg_reset <= data_in_reset;
      END IF;
    END IF;
  END PROCESS reg_reset_process;

  write_reset <= write_reg_reset;

  data_in_enable <= data_write_unsigned(0);

  
  decode_sel_enable <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001000001#, 14) ELSE
      '0';

  reg_enb_enable <= decode_sel_enable AND wr_enb;

  reg_enable_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_enable <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_enable = '1' THEN
        write_reg_enable <= data_in_enable;
      END IF;
    END IF;
  END PROCESS reg_enable_process;

  write_enable <= write_reg_enable;

END rtl;

