-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\ZedBoardTest\led_counter.vhd
-- Created: 2015-02-12 16:24:48
-- 
-- Generated by MATLAB 8.4 and HDL Coder 3.5
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 0.001
-- Target subsystem base rate: 0.001
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        0.001
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- LED1                          ce_out        0.001
-- LED2                          ce_out        0.001
-- LED3                          ce_out        0.001
-- LED4                          ce_out        0.001
-- read_back1                    ce_out        0.001
-- read_back2                    ce_out        0.001
-- read_back3                    ce_out        0.001
-- read_back4                    ce_out        0.001
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: led_counter
-- Source Path: ZedBoardTest/led_counter
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY led_counter IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        in1                               :   IN    std_logic;
        in2                               :   IN    std_logic;
        in3                               :   IN    std_logic;
        in4                               :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        LED1                              :   OUT   std_logic;
        LED2                              :   OUT   std_logic;
        LED3                              :   OUT   std_logic;
        LED4                              :   OUT   std_logic;
        read_back1                        :   OUT   std_logic;
        read_back2                        :   OUT   std_logic;
        read_back3                        :   OUT   std_logic;
        read_back4                        :   OUT   std_logic
        );
END led_counter;


ARCHITECTURE rtl OF led_counter IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Unit_Delay_out1                  : std_logic;
  SIGNAL Unit_Delay1_out1                 : std_logic;
  SIGNAL Unit_Delay3_out1                 : std_logic;
  SIGNAL Unit_Delay2_out1                 : std_logic;

BEGIN
  enb <= clk_enable;

  -- <S1>/Unit Delay
  Unit_Delay_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Unit_Delay_out1 <= '0';
      ELSIF enb = '1' THEN
        Unit_Delay_out1 <= in3;
      END IF;
    END IF;
  END PROCESS Unit_Delay_process;

  -- <S1>/Unit Delay1
  Unit_Delay1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Unit_Delay1_out1 <= '0';
      ELSIF enb = '1' THEN
        Unit_Delay1_out1 <= Unit_Delay_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay1_process;

  -- <S1>/Unit Delay3
  Unit_Delay3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Unit_Delay3_out1 <= '0';
      ELSIF enb = '1' THEN
        Unit_Delay3_out1 <= in4;
      END IF;
    END IF;
  END PROCESS Unit_Delay3_process;

  -- <S1>/Unit Delay2
  Unit_Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Unit_Delay2_out1 <= '0';
      ELSIF enb = '1' THEN
        Unit_Delay2_out1 <= Unit_Delay3_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay2_process;

  ce_out <= clk_enable;

  LED1 <= in1;

  LED2 <= in2;

  LED3 <= Unit_Delay1_out1;

  LED4 <= Unit_Delay2_out1;

  read_back1 <= in1;

  read_back2 <= in2;

  read_back3 <= Unit_Delay1_out1;

  read_back4 <= Unit_Delay2_out1;

END rtl;

