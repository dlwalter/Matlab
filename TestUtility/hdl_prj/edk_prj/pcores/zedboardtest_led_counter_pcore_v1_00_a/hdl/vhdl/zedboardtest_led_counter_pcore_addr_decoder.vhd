-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\ZedBoardTest\zedboardtest_led_counter_pcore_addr_decoder.vhd
-- Created: 2015-02-12 16:24:52
-- 
-- Generated by MATLAB 8.4 and HDL Coder 3.5
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: zedboardtest_led_counter_pcore_addr_decoder
-- Source Path: zedboardtest_led_counter_pcore/zedboardtest_led_counter_pcore_axi_lite/zedboardtest_led_counter_pcore_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY zedboardtest_led_counter_pcore_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_read_back1                   :   IN    std_logic;  -- ufix1
        read_read_back2                   :   IN    std_logic;  -- ufix1
        read_read_back3                   :   IN    std_logic;  -- ufix1
        read_read_back4                   :   IN    std_logic;  -- ufix1
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_in1                         :   OUT   std_logic;  -- ufix1
        write_in2                         :   OUT   std_logic  -- ufix1
        );
END zedboardtest_led_counter_pcore_addr_decoder;


ARCHITECTURE rtl OF zedboardtest_led_counter_pcore_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_read_back1            : std_logic;  -- ufix1
  SIGNAL const_1                          : std_logic;  -- ufix1
  SIGNAL decode_sel_read_back4            : std_logic;  -- ufix1
  SIGNAL decode_sel_read_back3            : std_logic;  -- ufix1
  SIGNAL decode_sel_read_back2            : std_logic;  -- ufix1
  SIGNAL const_z                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_read_back1              : std_logic;  -- ufix1
  SIGNAL data_in_read_back1               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_read_back1             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_read_back2              : std_logic;  -- ufix1
  SIGNAL data_in_read_back2               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_read_back2             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_read_back3              : std_logic;  -- ufix1
  SIGNAL data_in_read_back3               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_read_back3             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_read_back4              : std_logic;  -- ufix1
  SIGNAL data_in_read_back4               : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_read_back4             : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_enable            : std_logic;  -- ufix1
  SIGNAL reg_enb_axi_enable               : std_logic;  -- ufix1
  SIGNAL write_reg_axi_enable             : std_logic;  -- ufix1
  SIGNAL data_in_in1                      : std_logic;  -- ufix1
  SIGNAL decode_sel_in1                   : std_logic;  -- ufix1
  SIGNAL reg_enb_in1                      : std_logic;  -- ufix1
  SIGNAL write_reg_in1                    : std_logic;  -- ufix1
  SIGNAL data_in_in2                      : std_logic;  -- ufix1
  SIGNAL decode_sel_in2                   : std_logic;  -- ufix1
  SIGNAL reg_enb_in2                      : std_logic;  -- ufix1
  SIGNAL write_reg_in2                    : std_logic;  -- ufix1

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_read_back1 <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001000100#, 14) ELSE
      '0';

  const_1 <= '1';

  enb <= const_1;

  
  decode_sel_read_back4 <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001000111#, 14) ELSE
      '0';

  
  decode_sel_read_back3 <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001000110#, 14) ELSE
      '0';

  
  decode_sel_read_back2 <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001000101#, 14) ELSE
      '0';

  const_z <= (OTHERS => 'Z');


  reg_read_back1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_read_back1 <= '0';
      ELSIF enb = '1' THEN
        read_reg_read_back1 <= read_read_back1;
      END IF;
    END IF;
  END PROCESS reg_read_back1_process;

  data_in_read_back1 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_read_back1;

  
  decode_rd_read_back1 <= const_z WHEN decode_sel_read_back1 = '0' ELSE
      data_in_read_back1;

  reg_read_back2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_read_back2 <= '0';
      ELSIF enb = '1' THEN
        read_reg_read_back2 <= read_read_back2;
      END IF;
    END IF;
  END PROCESS reg_read_back2_process;

  data_in_read_back2 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_read_back2;

  
  decode_rd_read_back2 <= decode_rd_read_back1 WHEN decode_sel_read_back2 = '0' ELSE
      data_in_read_back2;

  reg_read_back3_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_read_back3 <= '0';
      ELSIF enb = '1' THEN
        read_reg_read_back3 <= read_read_back3;
      END IF;
    END IF;
  END PROCESS reg_read_back3_process;

  data_in_read_back3 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_read_back3;

  
  decode_rd_read_back3 <= decode_rd_read_back2 WHEN decode_sel_read_back3 = '0' ELSE
      data_in_read_back3;

  reg_read_back4_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        read_reg_read_back4 <= '0';
      ELSIF enb = '1' THEN
        read_reg_read_back4 <= read_read_back4;
      END IF;
    END IF;
  END PROCESS reg_read_back4_process;

  data_in_read_back4 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & read_reg_read_back4;

  
  decode_rd_read_back4 <= decode_rd_read_back3 WHEN decode_sel_read_back4 = '0' ELSE
      data_in_read_back4;

  data_read <= std_logic_vector(decode_rd_read_back4);

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  
  decode_sel_axi_enable <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000000000001#, 14) ELSE
      '0';

  reg_enb_axi_enable <= decode_sel_axi_enable AND wr_enb;

  reg_axi_enable_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_axi_enable <= '1';
      ELSIF enb = '1' AND reg_enb_axi_enable = '1' THEN
        write_reg_axi_enable <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_process;

  write_axi_enable <= write_reg_axi_enable;

  data_in_in1 <= data_write_unsigned(0);

  
  decode_sel_in1 <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001000000#, 14) ELSE
      '0';

  reg_enb_in1 <= decode_sel_in1 AND wr_enb;

  reg_in1_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_in1 <= '0';
      ELSIF enb = '1' AND reg_enb_in1 = '1' THEN
        write_reg_in1 <= data_in_in1;
      END IF;
    END IF;
  END PROCESS reg_in1_process;

  write_in1 <= write_reg_in1;

  data_in_in2 <= data_write_unsigned(0);

  
  decode_sel_in2 <= '1' WHEN addr_sel_unsigned = to_unsigned(2#00000001000001#, 14) ELSE
      '0';

  reg_enb_in2 <= decode_sel_in2 AND wr_enb;

  reg_in2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        write_reg_in2 <= '0';
      ELSIF enb = '1' AND reg_enb_in2 = '1' THEN
        write_reg_in2 <= data_in_in2;
      END IF;
    END IF;
  END PROCESS reg_in2_process;

  write_in2 <= write_reg_in2;

END rtl;

